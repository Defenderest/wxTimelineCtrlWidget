name: Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16'
    
    - name: Cache wxWidgets
      id: cache-wxwidgets
      uses: actions/cache@v4
      with:
        path: |
          D:\wxWidgets
        key: ${{ runner.os }}-wxwidgets-precompiled-3.3.0-${{ matrix.platform }}
        restore-keys: |
          ${{ runner.os }}-wxwidgets-precompiled-3.3.0-
          ${{ runner.os }}-wxwidgets-precompiled-
          ${{ runner.os }}-wxwidgets-
    
    - name: Download and extract wxWidgets
      if: steps.cache-wxwidgets.outputs.cache-hit != 'true'
      run: |
        # Download pre-compiled wxWidgets for Windows (more reliable than source)
        Write-Host "Downloading pre-compiled wxWidgets..."
        
        # Try wxWidgets 3.3.0 pre-compiled version first
        try {
          Write-Host "Downloading wxWidgets 3.3.0 Dev libraries..."
          Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.3.0/wxMSW-3.3.0_vc14x_x64_Dev.7z" -OutFile "wxWidgets-dev.7z" -TimeoutSec 300
          
          Write-Host "Downloading wxWidgets 3.3.0 Headers..."
          Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.3.0/wxWidgets-3.3.0-headers.7z" -OutFile "wxWidgets-headers.7z" -TimeoutSec 300
          
          $wxVersion = "3.3.0"
          $downloadSuccess = $true
        } catch {
          Write-Host "wxWidgets 3.3.0 download failed: $($_.Exception.Message)"
          Write-Host "Trying wxWidgets 3.2.4 pre-compiled..."
          try {
            Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.4/wxMSW-3.2.4_vc14x_x64_Dev.7z" -OutFile "wxWidgets-dev.7z" -TimeoutSec 300
            Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.4/wxWidgets-3.2.4-headers.7z" -OutFile "wxWidgets-headers.7z" -TimeoutSec 300
            
            $wxVersion = "3.2.4"
            $downloadSuccess = $true
          } catch {
            Write-Host "ERROR: Failed to download pre-compiled wxWidgets: $($_.Exception.Message)"
            exit 1
          }
        }
        
        # Verify downloads
        if (-not (Test-Path "wxWidgets-dev.7z")) {
          Write-Host "ERROR: Dev archive not found"
          exit 1
        }
        if (-not (Test-Path "wxWidgets-headers.7z")) {
          Write-Host "ERROR: Headers archive not found"
          exit 1
        }
        
        $devSize = (Get-Item "wxWidgets-dev.7z").Length
        $headersSize = (Get-Item "wxWidgets-headers.7z").Length
        Write-Host "Downloaded wxWidgets ${wxVersion}:"
        Write-Host "  Dev archive: $([math]::Round($devSize/1MB, 2)) MB"
        Write-Host "  Headers archive: $([math]::Round($headersSize/1MB, 2)) MB"
        
        # Clean up any existing directories
        Remove-Item -Path "D:\wxWidgets" -Recurse -Force -ErrorAction SilentlyContinue
        
        # Extract wxWidgets using 7-Zip (required for .7z files)
        Write-Host "Extracting wxWidgets using 7-Zip..."
        
        # Find 7-Zip installation
        $sevenZipPath = "C:\Program Files\7-Zip\7z.exe"
        if (-not (Test-Path $sevenZipPath)) {
          # Try alternative locations
          $sevenZipPath = "C:\ProgramData\chocolatey\bin\7z.exe"
          if (-not (Test-Path $sevenZipPath)) {
            # Try to find 7z in PATH
            $sevenZipPath = (Get-Command 7z -ErrorAction SilentlyContinue).Source
            if (-not $sevenZipPath) {
              Write-Host "ERROR: 7-Zip not found. 7-Zip is required to extract .7z files."
              Write-Host "Please install 7-Zip or ensure it's in the PATH."
              exit 1
            }
          }
        }
        
        # Extract Dev archive (contains lib and build folders)
        Write-Host "Using 7-Zip at: $sevenZipPath"
        Write-Host "Extracting Dev libraries..."
        try {
          $extractResult = & "$sevenZipPath" x "wxWidgets-dev.7z" "-oD:\wxWidgets" -y 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Dev archive extraction successful"
          } else {
            Write-Host "Dev archive extraction failed with exit code: $LASTEXITCODE"
            Write-Host "7-Zip output: $extractResult"
            exit 1
          }
        } catch {
          Write-Host "ERROR: Dev archive extraction failed: $($_.Exception.Message)"
          exit 1
        }
        
        # Extract Headers archive (contains include folder)
        Write-Host "Extracting Headers..."
        try {
          $extractResult = & "$sevenZipPath" x "wxWidgets-headers.7z" "-oD:\wxWidgets" -y 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Headers archive extraction successful"
          } else {
            Write-Host "Headers archive extraction failed with exit code: $LASTEXITCODE"
            Write-Host "7-Zip output: $extractResult"
            exit 1
          }
        } catch {
          Write-Host "ERROR: Headers archive extraction failed: $($_.Exception.Message)"
          exit 1
        }
        
        # Clean up 7z files
        Remove-Item -Path "wxWidgets-dev.7z" -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "wxWidgets-headers.7z" -Force -ErrorAction SilentlyContinue
        
        # Verify wxWidgets directory exists and has content
        if (-not (Test-Path "D:\wxWidgets")) {
            Write-Host "ERROR: wxWidgets directory not found at D:\wxWidgets"
            exit 1
        }
        
        # Show extracted contents
        Write-Host "Extracted wxWidgets contents:"
        Get-ChildItem -Path "D:\wxWidgets" -Directory | Select-Object Name | Format-Table -AutoSize
        
        # Verify critical directories exist
        $criticalDirs = @("include", "lib")
        foreach ($dir in $criticalDirs) {
          $dirPath = "D:\wxWidgets\$dir"
          if (Test-Path $dirPath) {
            Write-Host "✓ Found $dir directory" -ForegroundColor Green
            $itemCount = (Get-ChildItem -Path $dirPath -Recurse | Measure-Object).Count
            Write-Host "  Contains $itemCount items" -ForegroundColor Cyan
          } else {
            Write-Host "✗ Missing $dir directory" -ForegroundColor Red
            exit 1
          }
        }
        
        # Check for wx.h specifically
        $wxHeaderPath = "D:\wxWidgets\include\wx\wx.h"
        if (Test-Path $wxHeaderPath) {
          Write-Host "✓ Found wx.h header file" -ForegroundColor Green
        } else {
          Write-Host "✗ wx.h header file not found at $wxHeaderPath" -ForegroundColor Red
          Write-Host "Available include subdirectories:"
          Get-ChildItem -Path "D:\wxWidgets\include" -Directory -ErrorAction SilentlyContinue | Select-Object Name | Format-Table -AutoSize
          exit 1
        }
        
        $wxFiles = Get-ChildItem -Path "D:\wxWidgets" -File | Measure-Object
        Write-Host "wxWidgets directory contains $($wxFiles.Count) files total"
        
        # Pre-compiled binaries with headers are ready to use!
        Write-Host "✓ Pre-compiled wxWidgets with headers is ready to use!" -ForegroundColor Green
      shell: powershell
    
    - name: Set WXWIN environment variable
      run: |
        echo "WXWIN=D:\wxWidgets" >> $env:GITHUB_ENV
      shell: powershell
    
    - name: Verify setup
      run: |
        cd build
        .\verify_setup.bat
      shell: cmd
    
    - name: Build project
      run: |
        cd build
        .\build.bat ${{ matrix.configuration }}
      shell: cmd
    
    - name: Test executable
      run: |
        $exePath = "build\generated\${{ matrix.configuration }}\wxTimelineCtrlTest.exe"
        if (Test-Path $exePath) {
          Write-Host "✓ Executable built successfully: $exePath" -ForegroundColor Green
          $fileInfo = Get-Item $exePath
          Write-Host "File size: $([math]::Round($fileInfo.Length/1KB, 2)) KB" -ForegroundColor Cyan
        } else {
          Write-Host "✗ Executable not found: $exePath" -ForegroundColor Red
          exit 1
        }
      shell: powershell
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wxTimelineCtrl-${{ matrix.configuration }}-${{ matrix.platform }}
        path: |
          build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest.exe
          build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest.pdb
        retention-days: 30
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.configuration }}-${{ matrix.platform }}
        path: |
          build/generated/**/*.log
          build/generated/**/CMakeFiles/*.log
        retention-days: 7

  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Install available wxWidgets packages
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libgtk-3-dev
        
        # Try to install wxWidgets 3.2 first, fall back to 3.0 if not available
        sudo apt-get install -y libwxgtk3.2-dev || \
        sudo apt-get install -y libwxgtk3.0-gtk3-dev
    
    - name: Set WXWIN environment variable
      run: |
        # Find wxWidgets installation path
        if [ -d "/usr/include/wx-3.2" ]; then
          echo "WXWIN=/usr" >> $GITHUB_ENV
        elif [ -d "/usr/include/wx-3.0" ]; then
          echo "WXWIN=/usr" >> $GITHUB_ENV
        else
          echo "WXWIN=/usr" >> $GITHUB_ENV
        fi
    
    - name: Build project (Linux)
      run: |
        cd build
        mkdir -p generated
        cd generated
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
        make -j$(nproc)
    
    - name: Test executable (Linux)
      run: |
        # Check multiple possible locations for the executable
        echo "Searching for executable..."
        find build -name "wxTimelineCtrlTest*" -type f 2>/dev/null || echo "No files found with find"
        
        # List contents of build directory
        echo "Contents of build/generated:"
        ls -la build/generated/ || echo "build/generated directory not found"
        
        # Check common locations
        possible_paths=(
          "build/generated/wxTimelineCtrlTest"
          "build/generated/app/wxTimelineCtrlTest"
          "build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest"
          "build/generated/Debug/wxTimelineCtrlTest"
          "build/generated/Release/wxTimelineCtrlTest"
        )
        
        executable_found=false
        for path in "${possible_paths[@]}"; do
          if [ -f "$path" ]; then
            echo "✓ Executable found: $path"
            ls -lh "$path"
            executable_found=true
            break
          fi
        done
        
        if [ "$executable_found" = false ]; then
          echo "✗ Executable not found in any expected location"
          echo "Full directory structure:"
          find build -type f -name "*" 2>/dev/null || echo "Find command failed"
          exit 1
        fi
    
    - name: Upload build artifacts (Linux)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: wxTimelineCtrl-Linux-${{ matrix.configuration }}
        path: |
          build/generated/**/wxTimelineCtrlTest
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install wxwidgets cmake
    
    - name: Set WXWIN environment variable
      run: |
        echo "WXWIN=$(brew --prefix wxwidgets)" >> $GITHUB_ENV
    
    - name: Build project (macOS)
      run: |
        cd build
        mkdir -p generated
        cd generated
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
        make -j$(sysctl -n hw.ncpu)
    
    - name: Test executable (macOS)
      run: |
        # Check multiple possible locations for the executable
        echo "Searching for executable..."
        find build -name "wxTimelineCtrlTest*" -type f 2>/dev/null || echo "No files found with find"
        
        # List contents of build directory
        echo "Contents of build/generated:"
        ls -la build/generated/ || echo "build/generated directory not found"
        
        # Check common locations
        possible_paths=(
          "build/generated/wxTimelineCtrlTest"
          "build/generated/app/wxTimelineCtrlTest"
          "build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest"
          "build/generated/Debug/wxTimelineCtrlTest"
          "build/generated/Release/wxTimelineCtrlTest"
        )
        
        executable_found=false
        for path in "${possible_paths[@]}"; do
          if [ -f "$path" ]; then
            echo "✓ Executable found: $path"
            ls -lh "$path"
            executable_found=true
            break
          fi
        done
        
        if [ "$executable_found" = false ]; then
          echo "✗ Executable not found in any expected location"
          echo "Full directory structure:"
          find build -type f -name "*" 2>/dev/null || echo "Find command failed"
          exit 1
        fi
    
    - name: Upload build artifacts (macOS)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: wxTimelineCtrl-macOS-${{ matrix.configuration }}
        path: |
          build/generated/**/wxTimelineCtrlTest
        retention-days: 30

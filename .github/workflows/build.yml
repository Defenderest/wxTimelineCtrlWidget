name: Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16'
    
    - name: Cache wxWidgets
      id: cache-wxwidgets
      uses: actions/cache@v4
      with:
        path: |
          D:\wxWidgets
          D:\wxWidgets-build
        key: ${{ runner.os }}-wxwidgets-3.2.4-${{ matrix.platform }}
        restore-keys: |
          ${{ runner.os }}-wxwidgets-3.2.4-
          ${{ runner.os }}-wxwidgets-
    
    - name: Download and build wxWidgets
      if: steps.cache-wxwidgets.outputs.cache-hit != 'true'
      run: |
        # Download wxWidgets (try stable 3.2.3 first, then 3.2.4)
        Write-Host "Downloading wxWidgets..."
        $downloadSuccess = $false
        $wxVersion = ""
        
        # Try wxWidgets 3.2.3 first (more stable)
        try {
          Write-Host "Trying wxWidgets 3.2.3..."
          Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.3/wxWidgets-3.2.3.zip" -OutFile "wxWidgets.zip" -TimeoutSec 300
          $wxVersion = "3.2.3"
          $downloadSuccess = $true
        } catch {
          Write-Host "wxWidgets 3.2.3 download failed: $($_.Exception.Message)"
          Write-Host "Trying wxWidgets 3.2.4..."
          try {
            Invoke-WebRequest -Uri "https://github.com/wxWidgets/wxWidgets/releases/download/v3.2.4/wxWidgets-3.2.4.zip" -OutFile "wxWidgets.zip" -TimeoutSec 300
            $wxVersion = "3.2.4"
            $downloadSuccess = $true
          } catch {
            Write-Host "ERROR: Failed to download wxWidgets: $($_.Exception.Message)"
            exit 1
          }
        }
        
        # Verify download
        if (-not (Test-Path "wxWidgets.zip")) {
          Write-Host "ERROR: Downloaded file not found"
          exit 1
        }
        
        $fileSize = (Get-Item "wxWidgets.zip").Length
        Write-Host "Downloaded wxWidgets $wxVersion, file size: $([math]::Round($fileSize/1MB, 2)) MB"
        
        # Clean up any existing directories
        Remove-Item -Path "D:\temp" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "D:\wxWidgets" -Recurse -Force -ErrorAction SilentlyContinue
        
        # Create temp directory
        New-Item -ItemType Directory -Path "D:\temp" -Force
        
        # Extract wxWidgets using multiple methods for reliability
        Write-Host "Extracting wxWidgets..."
        $extractionSuccess = $false
        
        # Method 1: Try PowerShell Expand-Archive (most compatible)
        Write-Host "Trying PowerShell Expand-Archive..."
        try {
          Expand-Archive -Path "wxWidgets.zip" -DestinationPath "D:\temp" -Force
          $extractionSuccess = $true
          Write-Host "PowerShell extraction successful"
        } catch {
          Write-Host "PowerShell extraction failed: $($_.Exception.Message)"
        }
        
        # Method 2: Try Windows tar command if PowerShell failed
        if (-not $extractionSuccess) {
          Write-Host "Trying Windows tar command..."
          try {
            $tarResult = & tar -xf "wxWidgets.zip" -C "D:\temp" 2>&1
            if ($LASTEXITCODE -eq 0) {
              $extractionSuccess = $true
              Write-Host "tar extraction successful"
            } else {
              Write-Host "tar command failed with exit code: $LASTEXITCODE"
              Write-Host "tar output: $tarResult"
            }
          } catch {
            Write-Host "tar extraction failed: $($_.Exception.Message)"
          }
        }
        
        # Method 3: Try .NET extraction as last resort
        if (-not $extractionSuccess) {
          Write-Host "Trying .NET ZipFile extraction..."
          try {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory("$PWD\wxWidgets.zip", "D:\temp")
            $extractionSuccess = $true
            Write-Host ".NET extraction successful"
          } catch {
            Write-Host ".NET extraction failed: $($_.Exception.Message)"
          }
        }
        
        if (-not $extractionSuccess) {
          Write-Host "ERROR: All extraction methods failed"
          exit 1
        }
        
        # Check what was extracted
        Write-Host "Checking extracted contents..."
        if (-not (Test-Path "D:\temp")) {
          Write-Host "ERROR: Temp directory not found after extraction"
          exit 1
        }
        
        $extractedItems = Get-ChildItem -Path "D:\temp" -Directory
        Write-Host "Extracted directories: $($extractedItems.Name -join ', ')"
        
        # Find the wxWidgets directory (it might be wxWidgets-3.2.4 or just wxWidgets)
        $wxDir = $extractedItems | Where-Object { $_.Name -like "wxWidgets*" } | Select-Object -First 1
        if ($wxDir) {
            Write-Host "Found wxWidgets directory: $($wxDir.Name)"
            Write-Host "Moving $($wxDir.FullName) to D:\wxWidgets"
            try {
              Move-Item -Path $wxDir.FullName -Destination "D:\wxWidgets" -Force
            } catch {
              Write-Host "ERROR: Failed to move wxWidgets directory: $($_.Exception.Message)"
              exit 1
            }
        } else {
            Write-Host "ERROR: Could not find wxWidgets directory in extracted files"
            Write-Host "Available directories:"
            Get-ChildItem -Path "D:\temp" -Recurse -Directory | Select-Object Name, FullName | Format-Table
            exit 1
        }
        
        # Clean up temp directory and zip file
        Remove-Item -Path "D:\temp" -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path "wxWidgets.zip" -Force -ErrorAction SilentlyContinue
        
        # Verify wxWidgets directory exists and has content
        if (-not (Test-Path "D:\wxWidgets")) {
            Write-Host "ERROR: wxWidgets directory not found at D:\wxWidgets"
            exit 1
        }
        
        $wxFiles = Get-ChildItem -Path "D:\wxWidgets" -File | Measure-Object
        Write-Host "wxWidgets directory contains $($wxFiles.Count) files"
        
        # Create build directory
        New-Item -ItemType Directory -Path "D:\wxWidgets-build" -Force
        
        # Build wxWidgets
        Write-Host "Building wxWidgets..."
        cd "D:\wxWidgets-build"
        cmake -G "Visual Studio 17 2022" -A ${{ matrix.platform }} -DCMAKE_BUILD_TYPE=Release `
              -DwxBUILD_SHARED=OFF `
              -DwxBUILD_SAMPLES=OFF `
              -DwxBUILD_TESTS=OFF `
              -DwxBUILD_DEMOS=OFF `
              -DwxBUILD_BENCHMARKS=OFF `
              -DwxUSE_WEBVIEW=OFF `
              -DwxUSE_MEDIACTRL=OFF `
              "D:\wxWidgets"
        
        cmake --build . --config Release --parallel
        cmake --build . --config Debug --parallel
      shell: powershell
    
    - name: Set WXWIN environment variable
      run: |
        echo "WXWIN=D:\wxWidgets" >> $env:GITHUB_ENV
      shell: powershell
    
    - name: Verify setup
      run: |
        cd build
        .\verify_setup.bat
      shell: cmd
    
    - name: Build project
      run: |
        cd build
        .\build.bat ${{ matrix.configuration }}
      shell: cmd
    
    - name: Test executable
      run: |
        $exePath = "build\generated\${{ matrix.configuration }}\wxTimelineCtrlTest.exe"
        if (Test-Path $exePath) {
          Write-Host "✓ Executable built successfully: $exePath" -ForegroundColor Green
          $fileInfo = Get-Item $exePath
          Write-Host "File size: $([math]::Round($fileInfo.Length/1KB, 2)) KB" -ForegroundColor Cyan
        } else {
          Write-Host "✗ Executable not found: $exePath" -ForegroundColor Red
          exit 1
        }
      shell: powershell
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wxTimelineCtrl-${{ matrix.configuration }}-${{ matrix.platform }}
        path: |
          build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest.exe
          build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest.pdb
        retention-days: 30
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.configuration }}-${{ matrix.platform }}
        path: |
          build/generated/**/*.log
          build/generated/**/CMakeFiles/*.log
        retention-days: 7

  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        # Install available wxWidgets packages
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libgtk-3-dev
        
        # Try to install wxWidgets 3.2 first, fall back to 3.0 if not available
        sudo apt-get install -y libwxgtk3.2-dev || \
        sudo apt-get install -y libwxgtk3.0-gtk3-dev
    
    - name: Set WXWIN environment variable
      run: |
        # Find wxWidgets installation path
        if [ -d "/usr/include/wx-3.2" ]; then
          echo "WXWIN=/usr" >> $GITHUB_ENV
        elif [ -d "/usr/include/wx-3.0" ]; then
          echo "WXWIN=/usr" >> $GITHUB_ENV
        else
          echo "WXWIN=/usr" >> $GITHUB_ENV
        fi
    
    - name: Build project (Linux)
      run: |
        cd build
        mkdir -p generated
        cd generated
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
        make -j$(nproc)
    
    - name: Test executable (Linux)
      run: |
        # Check multiple possible locations for the executable
        echo "Searching for executable..."
        find build -name "wxTimelineCtrlTest*" -type f 2>/dev/null || echo "No files found with find"
        
        # List contents of build directory
        echo "Contents of build/generated:"
        ls -la build/generated/ || echo "build/generated directory not found"
        
        # Check common locations
        possible_paths=(
          "build/generated/wxTimelineCtrlTest"
          "build/generated/app/wxTimelineCtrlTest"
          "build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest"
          "build/generated/Debug/wxTimelineCtrlTest"
          "build/generated/Release/wxTimelineCtrlTest"
        )
        
        executable_found=false
        for path in "${possible_paths[@]}"; do
          if [ -f "$path" ]; then
            echo "✓ Executable found: $path"
            ls -lh "$path"
            executable_found=true
            break
          fi
        done
        
        if [ "$executable_found" = false ]; then
          echo "✗ Executable not found in any expected location"
          echo "Full directory structure:"
          find build -type f -name "*" 2>/dev/null || echo "Find command failed"
          exit 1
        fi
    
    - name: Upload build artifacts (Linux)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: wxTimelineCtrl-Linux-${{ matrix.configuration }}
        path: |
          build/generated/**/wxTimelineCtrlTest
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew install wxwidgets cmake
    
    - name: Set WXWIN environment variable
      run: |
        echo "WXWIN=$(brew --prefix wxwidgets)" >> $GITHUB_ENV
    
    - name: Build project (macOS)
      run: |
        cd build
        mkdir -p generated
        cd generated
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
        make -j$(sysctl -n hw.ncpu)
    
    - name: Test executable (macOS)
      run: |
        # Check multiple possible locations for the executable
        echo "Searching for executable..."
        find build -name "wxTimelineCtrlTest*" -type f 2>/dev/null || echo "No files found with find"
        
        # List contents of build directory
        echo "Contents of build/generated:"
        ls -la build/generated/ || echo "build/generated directory not found"
        
        # Check common locations
        possible_paths=(
          "build/generated/wxTimelineCtrlTest"
          "build/generated/app/wxTimelineCtrlTest"
          "build/generated/${{ matrix.configuration }}/wxTimelineCtrlTest"
          "build/generated/Debug/wxTimelineCtrlTest"
          "build/generated/Release/wxTimelineCtrlTest"
        )
        
        executable_found=false
        for path in "${possible_paths[@]}"; do
          if [ -f "$path" ]; then
            echo "✓ Executable found: $path"
            ls -lh "$path"
            executable_found=true
            break
          fi
        done
        
        if [ "$executable_found" = false ]; then
          echo "✗ Executable not found in any expected location"
          echo "Full directory structure:"
          find build -type f -name "*" 2>/dev/null || echo "Find command failed"
          exit 1
        fi
    
    - name: Upload build artifacts (macOS)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: wxTimelineCtrl-macOS-${{ matrix.configuration }}
        path: |
          build/generated/**/wxTimelineCtrlTest
        retention-days: 30
